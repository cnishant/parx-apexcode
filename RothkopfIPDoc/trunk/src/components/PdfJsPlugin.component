<apex:component >

 <head>
        <title>Simple pdf.js page viewer</title>
        <!-- PDFJSSCRIPT_INCLUDE_FIREFOX_EXTENSION -->

        <link rel="stylesheet" href="{!URLFOR($Resource.pdfjs, 'viewer.css')}"/>

        <script type="text/javascript" src="{!URLFOR($Resource.pdfjs, 'compatibility.js')}"></script> <!-- PDFJSSCRIPT_REMOVE_FIREFOX_EXTENSION -->

        <!-- PDFJSSCRIPT_INCLUDE_BUILD -->
<!-- This snippet is used in production, see Makefile -->
<script type="text/javascript" src="{!URLFOR($Resource.pdfjs, 'pdf.js')}"></script>

<script type="text/javascript">
  // This specifies the location of the pdf.js file.
  PDFJS.workerSrc = "{!URLFOR($Resource.pdfjs, 'pdf.js')}";
 <!-- PDFJS.workerSrc = '{!URLFOR($Resource.pdfSrc, 'src/worker_loader.js')}'; -->
</script>
        <script type="text/javascript" src="{!URLFOR($Resource.pdfjs, 'debugger.js')}"></script>
        <script type="text/javascript" src="{!URLFOR($Resource.pdfjs, 'viewer.js')}"></script>
        <style>
	        body {
	            background:white;
	        }
	    </style>
        <script src="{!$Resource.connectionjs}" type="text/javascript"></script>
<script>
        var Base64Binary = {
                _keyStr : "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
            
                /* will return a  Uint8Array type */
                decodeArrayBuffer: function(input) {
                    var bytes = Math.ceil( (3*input.length) / 4.0);
                    var ab = new ArrayBuffer(bytes);
                    this.decode(input, ab);
            
                    return ab;
                },
            
                decode: function(input, arrayBuffer) {
                    //get last chars to see if are valid
                    var lkey1 = this._keyStr.indexOf(input.charAt(input.length-1));      
                    var lkey2 = this._keyStr.indexOf(input.charAt(input.length-1));      
            
                    var bytes = Math.ceil( (3*input.length) / 4.0);
                    if (lkey1 == 64) bytes--; //padding chars, so skip
                    if (lkey2 == 64) bytes--; //padding chars, so skip
            
                    var uarray;
                    var chr1, chr2, chr3;
                    var enc1, enc2, enc3, enc4;
                    var i = 0;
                    var j = 0;
            
                    if (arrayBuffer)
                        uarray = new Uint8Array(arrayBuffer);
                    else
                        uarray = new Uint8Array(bytes);
            
                    input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");
            
                    for (i=0; i<bytes; i+=3) {  
                        //get the 3 octects in 4 ascii chars
                        enc1 = this._keyStr.indexOf(input.charAt(j++));
                        enc2 = this._keyStr.indexOf(input.charAt(j++));
                        enc3 = this._keyStr.indexOf(input.charAt(j++));
                        enc4 = this._keyStr.indexOf(input.charAt(j++));
            
                        chr1 = (enc1 << 2) | (enc2 >> 4);
                        chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
                        chr3 = ((enc3 & 3) << 6) | enc4;
            
                        uarray[i] = chr1;           
                        if (enc3 != 64) uarray[i+1] = chr2;
                        if (enc4 != 64) uarray[i+2] = chr3;
                    }
            
                    return uarray;  
                }
            }
            
            function render(data) {
                  PDFView.open(Base64Binary.decodeArrayBuffer(data), 0);               
                  //
                  // Render PDF page into canvas context
                  //
                   if (PDFJS.isFirefoxExtension || !window.File || !window.FileReader ||
                      !window.FileList || !window.Blob) {
                    document.getElementById('fileInput').setAttribute('hidden', 'true');
                    document.getElementById('fileInputSeperator')
                                              .setAttribute('hidden', 'true');
                  } else {
                    document.getElementById('fileInput').value = null;
                  }
                
                  // Special debugging flags in the hash section of the URL.
                  var hash = document.location.hash.substring(1);
                  var hashParams = PDFView.parseQueryString(hash);
                
                  if ('disableWorker' in hashParams)
                      PDFJS.disableWorker = (hashParams['disableWorker'] === 'true');
                
                  if ('disableTextLayer' in hashParams)
                      PDFJS.disableTextLayer = (hashParams['disableTextLayer'] === 'true');
                
                  if ('pdfBug' in hashParams &&
                      (!PDFJS.isFirefoxExtension || FirefoxCom.request('pdfBugEnabled'))) {
                      PDFJS.pdfBug = true;
                      var pdfBug = hashParams['pdfBug'];
                      var enabled = pdfBug.split(',');
                      PDFBug.enable(enabled);
                      PDFBug.init();
                  }
                
                  var sidebarScrollView = document.getElementById('sidebarScrollView');
                  sidebarScrollView.addEventListener('scroll', updateThumbViewArea, true);
            }      

</script>

    </head>

  <body>
    <div id="controls">
      <button id="previous" onclick="PDFView.page--;return false;" oncontextmenu="return false;">
        <img src="{!URLFOR($Resource.pdfjs, 'images/go-up.png')}" align="top" height="16"/>
        Previous
      </button>

      <button id="next" onclick="PDFView.page++;return false;" oncontextmenu="return false;">
        <img src="{!URLFOR($Resource.pdfjs, 'images/go-down.png')}" align="top" height="16"/>
        Next
      </button>

      <div class="separator"></div>

      <input type="number" id="pageNumber" onchange="PDFView.page = this.value;return false;" value="1" size="4" min="1" />

      <span>/</span>
      <span id="numPages">--</span>

      <div class="separator"></div>

      <button id="zoomOut" title="Zoom Out" onclick="PDFView.zoomOut();return false;" oncontextmenu="return false;" style="vertical-align: top;">
        <img src="{!URLFOR($Resource.pdfjs, 'images/zoom-out.png')}" align="top" height="16"/>
      </button>
      <button id="zoomIn" title="Zoom In" onclick="PDFView.zoomIn();return false;" oncontextmenu="return false;" style="vertical-align: top;">
        <img src="{!URLFOR($Resource.pdfjs, 'images/zoom-in.png')}" align="top" height="16"/>
      </button>

      <div class="separator"></div>

      <select id="scaleSelect" onchange="PDFView.parseScale(this.value);return false;" oncontextmenu="return false;">
        <option id="customScaleOption" value="custom"></option>
        <option value="0.5">50%</option>
        <option value="0.75">75%</option>
        <option value="1">100%</option>
        <option value="1.25">125%</option>
        <option value="1.5">150%</option>
        <option value="2">200%</option>
        <option id="pageWidthOption" value="page-width">Page Width</option>
        <option id="pageFitOption" value="page-fit">Page Fit</option>
        <option id="pageAutoOption" value="auto" selected="selected">Auto</option>
      </select>

      <div class="separator"></div>

      <button id="print" onclick="window.print();return false;" oncontextmenu="return false;">
        <img src="{!URLFOR($Resource.pdfjs, 'images/document-print.png')}" align="top" height="16"/>
        Print
      </button>

    <!--  <button id="download" title="Download" onclick="PDFView.download();" oncontextmenu="return false;">
        <img src="{!URLFOR($Resource.pdfjs, 'images/download.png')}" align="top" height="16"/>
        Download
      </button>-->

      <div class="separator"></div>

      <input id="fileInput" type="file" oncontextmenu="return false;"/>

      <div id="fileInputSeperator" class="separator"></div>

      <a href="#" id="viewBookmark" title="Bookmark (or copy) current location">
        <img src="{!URLFOR($Resource.pdfjs, 'images/bookmark.png')}" alt="Bookmark" align="top" height="16"/>
      </a>

    </div>
    <div id="errorWrapper" hidden='true'>
      <div id="errorMessageLeft">
        <span id="errorMessage"></span>
        <button id="errorShowMore" onclick="" oncontextmenu="return false;">
          More Information
        </button>
        <button id="errorShowLess" onclick="" oncontextmenu="return false;" hidden='true'>
          Less Information
        </button>
      </div>
      <div id="errorMessageRight">
        <button id="errorClose" oncontextmenu="return false;">
          Close
        </button>
      </div>
      <div class="clearBoth"></div>
      <textarea id="errorMoreInfo" hidden='true' readonly="readonly"></textarea>
    </div>

    <div id="sidebar">
      <div id="sidebarBox">
        <div id="pinIcon" onClick="PDFView.pinSidebar()"></div>
        <div id="sidebarScrollView">
          <div id="sidebarView"></div>
        </div>
        <div id="outlineScrollView" hidden='true'>
          <div id="outlineView"></div>
        </div>
        <div id="sidebarControls">
          <button id="thumbsSwitch" title="Show Thumbnails" onclick="PDFView.switchSidebarView('thumbs')" data-selected="data-selected">
            <img src="{!URLFOR($Resource.pdfjs, 'images/nav-thumbs.png')}" align="top" height="16" alt="Thumbs" />
          </button>
          <button id="outlineSwitch" title="Show Document Outline" onclick="PDFView.switchSidebarView('outline')" disabled="disabled">
            <img src="{!URLFOR($Resource.pdfjs, 'images/nav-outline.png')}" align="top" height="16" alt="Document Outline" />
          </button>
        </div>
      </div>
    </div>

    <div id="loading">Loading... 0%</div>
    <div id="viewer"></div>
  </body>
</apex:component>