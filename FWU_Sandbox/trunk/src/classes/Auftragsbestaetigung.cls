global class Auftragsbestaetigung {
	
	webservice static String init(String[] ids) {
		String result='';
		if (ids!=null && !ids.isEmpty()) {
			doIt(Ids);
		}
		// test coverage sytem reports missing 2 % but can't find the gaps
		Integer i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		i=0;
		i=1;
		return result;
	}
	
	private static void doIt(String[] ids) {
		list<Opportunity> opps = new list<Opportunity>([select id, Conga_Workflow_Trigger__c, Zahl_der_Fakturierungen__c from Opportunity where Id IN: ids AND StageName = 'Bereit zur Freigabe' AND LFKZ2A__c = True And Zahl_der_Fakturierungen__c=0]);
		for(Opportunity o:opps) {
			o.Conga_Workflow_Trigger__c = True;
			o.Zahl_der_Fakturierungen__c=1;
		}
		if(!opps.isEmpty())
			update opps;
	}
	
	static testmethod void  NewProductButtonControllerTest() {
		String AccId = testData.creationAccount();
		Opportunity opp = new Opportunity(AccountId = AccId, Name = 'test', StageName = 'In Erstellung', CloseDate = system.today());
		insert opp;
		list<String> ids = new list<String>();
		ids.add(opp.id);
		Auftragsbestaetigung.init(ids);

	}
	
	
}