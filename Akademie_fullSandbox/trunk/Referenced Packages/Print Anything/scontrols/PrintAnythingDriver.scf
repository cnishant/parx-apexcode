<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
	<head>
		<title>Printable View</title>
		<script src="/soap/ajax/8.0/connection.js"></script>
		<script id="clientEventHandlersJS" language="javascript">
<!--

var isDebug = false;
var isComplete = false;

var mergeData = new Array();

var packageId = null;

var metaData = {};

var singularRecords = null;

var currentQuery = 0;

var templateSelected = null;
var templateCount = 0;

function prtanyDebug(msg, clazz) {
	if (isDebug) {
		document.getElementById("divDebug").innerHTML += "<p class='"+clazz+"'>"+msg+"</p>";
	}
}

function notify(message) {
	document.getElementById("progressDisplay").style.display = "block";
	document.getElementById("progressMsg").innerHTML = "<p>"+message+"</p>";
}

function getFields(sobject) {
	try {
		var describeResult = sforce.connection.describeSObject(sobject);
		var result = "";
		for (var i = 0; i < describeResult.fields.length; i++) {
			if (i > 0) {
				result += ",";
			}
			result += describeResult.fields[i].name;
		}
		return result;
	} catch (error) {
		notify(error.faultstring);
	}	
}

function loadParameters() {

	prtanyDebug("loading package meta data", "debug");

	var userInfo = sforce.connection.getUserInfo();

	addMergeField("UserInfo.FullName",userInfo.userFullName);
	addMergeField("UserInfo.Email",userInfo.userEmail);
	addMergeField("UserInfo.OrganizationId",userInfo.organizationId.substring(0,15));

	var url = ""+window.location;
	var params = url.substring(url.indexOf("?")+1);
	while (params.indexOf("=") != -1) {
		var name = params.substring(0,params.indexOf("="));
		var value;
		var endPosition = params.indexOf("&");
		if (endPosition == -1) {
			value = params.substring(params.indexOf("=")+1);
			params = "";
		} else {
			value = params.substring(params.indexOf("=")+1, endPosition);
			params = params.substring(endPosition+1);
		}
		addMergeField("Parameter."+name,value);
	}

}

function nvl(value, defaultvalue) {
	if (value == null) {
		return defaultvalue;
	} else {
		return value;
	}
}

function merge(source) {

	var result = source;
	if (result == null || result =="") {
		return result;
	}

	// process repeat tags
	while (result.indexOf("<prtany:repeat") != -1) {

		var startTagStartPos = result.indexOf("<prtany:repeat");
		var startTagEndPos = result.indexOf(">", startTagStartPos);

		var startQuotePos = result.indexOf("\"", startTagStartPos);
		var endQuotePos = result.indexOf("\"", startQuotePos+1);

		var repeatingRecord = result.substring(startQuotePos+1,endQuotePos);

		var endTagStartPos = result.indexOf("</prtany:repeat", startTagStartPos);
		if (endTagStartPos == -1) {
			throw "No repeat end tag was found";
		}
		var endTagEndPos = result.indexOf(">", endTagStartPos);

		var repeatString = result.substring(startTagEndPos+1,endTagStartPos-1);

		var repeatCount = mergeData[repeatingRecord+".COUNT"];
		var repeatResult = "";
		for (i=0; i < repeatCount; i++) {
			repeatResult += repeatString.replace(/\.n/g,"."+i);
		}

		result = result.substring(0,startTagStartPos) + repeatResult + result.substring(endTagEndPos+1)
	}

	// replace any merge fields
	while (result.indexOf("{") != -1) {

		var startPos = result.indexOf("{");
		var endPos = result.indexOf("}", startPos);

		var fieldName = result.substring(startPos+1, endPos);

		var isDate = (fieldName.indexOf("DATE:") == 0);
		var specificDateFormat = null;
		if (isDate) {
			fieldName = fieldName.substring(5);
		} else {
			// test for date with format
			isDate = (fieldName.indexOf("DATE[") == 0);
			if (isDate) {
				var endFormatPos = fieldName.indexOf("]:");
				specificDateFormat = fieldName.substring(5,endFormatPos);
				fieldName = fieldName.substring(endFormatPos+2);
			}
		}
		
		var isCurrency = (fieldName.indexOf("CURRENCY:") == 0);
		if (isCurrency) {
			fieldName = fieldName.substring(9);
		}

		var fieldValue = mergeData[fieldName];

		if (fieldValue == null || fieldValue == "") {
			fieldValue = "";
		} else {
			if (isDate) {
				fieldValue = FormatDate(fieldValue,nvl(specificDateFormat,getDefaultDateFormat()));
			} else if (isCurrency) {
				fieldValue = formatCurrency(fieldValue);
			}
		}

		result = result.substring(0,startPos) + nvl(fieldValue,"") + result.substring(endPos+1);
	}

	// remove any conditional content
	while (result.indexOf("<prtany:notEmpty") != -1) {

		var startTagStartPos = result.indexOf("<prtany:notEmpty");
		var startTagEndPos = result.indexOf(">", startTagStartPos);

		var startQuotePos = result.indexOf("\"", startTagStartPos);
		var endQuotePos = result.indexOf("\"", startQuotePos+1);

		var conditionalField = result.substring(startQuotePos+1,endQuotePos);

		var endTagStartPos = result.indexOf("</prtany:notEmpty", startTagStartPos);
		if (endTagStartPos == -1) {
			throw "No notEmpty end tag was found";
		}
		var endTagEndPos = result.indexOf(">", endTagStartPos);

		var conditionalString = result.substring(startTagEndPos+1,endTagStartPos);

		var conditionalValue = mergeData[conditionalField];
		if (conditionalValue == null || conditionalValue == "") {
			conditionalString = "";
		}

		result = result.substring(0,startTagStartPos) + conditionalString + result.substring(endTagEndPos+1)
	}

	return result;
}

function setup() {

	isDebug = window.location.href.indexOf("debug") != -1;

	if (isDebug) {
		document.getElementById("divDebugHeader").style.display = "block";
		document.getElementById("divDebug").style.display = "block";
	}

	loadPackage();
}

function loadPackage() {

	content = document.getElementById("divContent");
	while (content.hasChildNodes()) { content.removeChild(content.firstChild); }

	selectorTable = document.getElementById("selector");
	while (selectorTable.hasChildNodes()) { selectorTable.removeChild(selectorTable.firstChild); }

	metaResultCount = 0;

	mergeData = new Array();

	entityQueryCounts = {};

	if (isDebug) {
		var node = document.getElementById("divDebug");
		while (node.hasChildNodes()) { node.removeChild(node.firstChild); }
	}

	loadParameters();

	notify("Loading Package...");

	metaData["PRINTANY__PACKAGE__c"] = new Array();
	metaData["PRINTANY__TEMPLATE__c"] = new Array();
	metaData["PRINTANY__QUERY__c"] = new Array();
	
	var filter = null;
	if (mergeData["Parameter.packageId"] != null) {
		filter = "where pkg.PRINTANY__Name__c = '{Parameter.packageId}'";
	} else if (mergeData["Parameter.package"] != null) {
		filter = "where pkg.id = '{Parameter.package}'";
	} else {
	  	notify("Parameter 'package' or 'packageId' must be present");
	}

	if (filter != null) {
		sforce.connection.query(merge(
			"select "+getFields("PRINTANY__Package__c")+","+
			"(select "+getFields("PRINTANY__Query__c")+" from pkg.PRINTANY__Queries__r qry order by qry.PRINTANY__sequence__c),"+
			"(select "+getFields("PRINTANY__Template__c")+" from pkg.PRINTANY__Templates__r tmp)"+
			" from PRINTANY__Package__c pkg "+filter),
			{
				onSuccess: function(result) {
					if (result.size != 1) {
						notify(merge("Package Id: {Parameter.package} does not exist"));
					} else {
						var package = result.getArray("records")[0];
						packageId = package.get("Id");
						queryCount = 0;
						templateCount = 0;
						metaData["PRINTANY__PACKAGE__c"].push(package);
						
						if (package.PRINTANY__Queries__r) {
							queryIterator = new sforce.QueryResultIterator(package.PRINTANY__Queries__r);
							while (queryIterator.hasNext()) {
								queryCount++;
								metaData["PRINTANY__QUERY__c"].push(queryIterator.next());
							}
						}
						
						if (package.PRINTANY__Templates__r) {
							templateIterator = new sforce.QueryResultIterator(package.PRINTANY__Templates__r);
							while (templateIterator.hasNext()) {
								templateCount++;
								var current = templateIterator.next();
								metaData["PRINTANY__TEMPLATE__c"][current.get("Id")] = current;
							}
						}
						
						prtanyDebug("Meta data : 1 Package, "+queryCount+" query(s), "+templateCount+" template(s), ","debug");
						
						currentQuery = -1;

						execNextQuery();
						
					}
				},
				onFailure: function(error) {
					notify(error.faultstring);			
				}
			}
		);
	}
}

function handleFailure(error, source) {
	if (error.message) {
		notify("Error : " + error.message + ", line : " + error.lineNumber);
	} else if (error.faultstring) {
		notify("Error : " + error.faultstring);
	} else {
		notify("Error occurred : " + error);
	}
}

function reloadTemplate() {
	notify("Reloading templates and re-merging");
	sforce.connection.query(merge("Select "+getFields("PRINTANY__TEMPLATE__c")+" From PRINTANY__TEMPLATE__c where PRINTANY__PACKAGE__c = '"+packageId+"'"), {
		onSuccess: 
		function (result) {
			if (result.size) {
				templateIterator = new sforce.QueryResultIterator(result);
				while (templateIterator.hasNext()) {
					current = templateIterator.next();
					metaData["PRINTANY__TEMPLATE__c"][current.get("Id")] = current;
				}
			}
			mergeTemplate(templateSelected);
		},
		onFailure: 
		function(error) {
			notify(error.faultstring);			
		}	
	});
}

function addMergeField(name, value) {
	prtanyDebug("adding merge field - "+name+" = "+value,"merge");
	mergeData[name] = value;
}

function addMergeData(record, prefix, recordNumber) {

	var describeResult = sforce.connection.describeSObject(record.type);
	
	var fieldCount = describeResult.fields.length;

	for (var i = 0; i < fieldCount; i++) {
		var fieldName = describeResult.fields[i].name;
		var fieldType = describeResult.fields[i].type;
		var value = record.get(fieldName);
		
		// check for child-to-parent joined data
		if (fieldType == 'reference') {
			var parentRecord = record.get(describeResult.fields[i].relationshipName);
			if (parentRecord != null) {
				addMergeData(parentRecord, prefix+"."+parentRecord.type, recordNumber);
			}
		}
		
		if (value != null) {
		
			var name = prefix;
			
			name += "."+fieldName;

			if (recordNumber != null) {
				name += "."+recordNumber;
			}
			
			if (fieldType == 'datetime') {
				value = record.getDateTime(fieldName);
			} else if (fieldType == 'date') {
				value = record.getDate(fieldName);
			} else if (fieldType == 'id' || fieldType == 'reference') {
				value = value.substring(0,15);
			}
						
			addMergeField(name,value,recordNumber);
		}
	}	

	// check for parent to child relationship joined data
	if (describeResult.childRelationships != null) {
		for (var i = 0; i < describeResult.childRelationships.length; i++) {
			var relly = describeResult.childRelationships[i];
			if (relly.relationshipName && record.get(relly.relationshipName) != null) {
				var childRecs = record.get(relly.relationshipName).getArray("records");
				addMergeField(prefix+"."+relly.relationshipName+".COUNT",childRecs.length);
				for (var j=0; j < childRecs.length; j++) {
					addMergeData(childRecs[j], prefix+"."+relly.relationshipName, j);
				}
			}
		}	
	}

}

function execNextQuery() {
	var queries = metaData["PRINTANY__QUERY__c"];
	if (currentQuery < queries.length-1) {

		currentQuery++;
		var query = queries[currentQuery];
		var object = query.get("PRINTANY__Retrieve_Entity__c");

		var prefix = queries[currentQuery].getInt("PRINTANY__Sequence__c")+". ";

		if (query.get("PRINTANY__Retrieve_Field__c") != null) {
			var idField = query.get("PRINTANY__Retrieve_Field__c");
			var idArray = new Array();
			if (idField.lastIndexOf(".n") == idField.length-2) {
				var fieldPrefix = idField.substring(0,idField.length-1);
				var recordNumber = 0;
				var mergeField = fieldPrefix+recordNumber;
				while (mergeData[mergeField] != null) {
					idArray.push(mergeData[mergeField]);
					prtanyDebug(prefix+"retrieve multi row - "+object+":"+mergeData[mergeField],"debug");
					recordNumber++;
					mergeField = fieldPrefix+recordNumber;
				}
			} else {
				var singleId = mergeData[idField];
				idArray.push(singleId);
				prtanyDebug(prefix+"retrieve single row - "+object+":"+singleId,"debug");
			}
			if (idArray.length == 0) {
				prtanyDebug("No ids found for retrieve","debug");
			}
			sforce.connection.retrieve(getFields(object), object, idArray,
				{onSuccess: processQuery, onFailure: handleFailure});
		} else {
		   	qry = merge(query.get("PRINTANY__SOQL__c"));
			prtanyDebug(prefix+qry,"debug");
			sforce.connection.query(qry,
				{onSuccess: processQuery, onFailure: handleFailure});
		}

		notify("Running query : "+queries[currentQuery].get("Name"));
		
	} else {
		applyTemplate();
	}
}

function processQuery(qr) {

	var records;
	if (qr.size) {
		records = qr.getArray("records");
		prtanyDebug("Result : query response. Count : "+qr.size, "debug");
	} else {
		records = qr;
	}

	var queries = metaData["PRINTANY__QUERY__c"];
	var singleRecordFields = queries[currentQuery].get("PRINTANY__Singleton_Field_List__c");
	var querySeq = queries[currentQuery].getInt("PRINTANY__Sequence__c");
	var isSingleRecordQuery = (singleRecordFields != null);

	if (isSingleRecordQuery) {
		if (records != null) {
			if (records.length > 1) {
				chooseSingular(records, singleRecordFields);
			} else {
				if (records.length == 1) {
					addMergeData(records[0], records[0].type+querySeq, null);
				} else {
					prtanyDebug("No records returned for single record query","debug");
				}
				execNextQuery();
			}
		} else {
			execNextQuery();
		}
	} else {
		if (records != null && records.length > 0) {
			// TODO use QueryResultIterator for SOQL here. Pass context variable indicating SOQL vs RETRIEVE
			entity = records[0].type;
			countField = entity;
			countField += querySeq;
			countField += ".COUNT";
			addMergeField(countField,records.length);
			for (var i = 0; i < records.length; i++) {
				addMergeData(records[i], records[i].type+querySeq, i);
			}
		} else {
			prtanyDebug("No records returned for multi record query","debug");
		}
		execNextQuery();
	}

}

function chooseSingular(records, fieldList) {

	notify("Please choose a "+metaData["PRINTANY__QUERY__c"][currentQuery].get("Name"));
	singularRecords = records;
	fields = fieldList;

	resetSelectorTable();
	selectorTable = document.getElementById("selector");	
	selectorTableBody = document.createElement("tbody");
	selectorTable.appendChild(selectorTableBody);
	
	fieldArray = new Array();
	do {
		if (fields.indexOf(",") == -1) {
			fieldArray.push(fields);
			fields = "";
		} else {
			fieldArray.push(fields.substring(0,fields.indexOf(",")));
			fields = fields.substring(fields.indexOf(",")+1);
		}
	} while (fields.length > 0);

	selectorTable.style.display = "block";
	for (i=0; i < singularRecords.length; i++) {
		newRow = selectorTableBody.insertRow(-1);
		newCell = newRow.insertCell(-1);
		newCell.innerHTML = "<input type='radio' onClick='processChoice("+i+");'>";
		
		for (j=0; j < fieldArray.length; j++) {
			newCell = newRow.insertCell(-1);
			newCell.className="selector";
			try {
				var periodPos = fieldArray[j].indexOf(".");

				if (periodPos == -1) {
					value = singularRecords[i].get(fieldArray[j]);
				} else {
					value = singularRecords[i].get(fieldArray[j].substring(0,periodPos)).get(fieldArray[j].substring(periodPos+1));
				}
				if (value != null) {
					newCell.innerHTML = value;
				}
			} catch (badField) {
				alert(badField+". Please remove any whitespace in your field list");
			};
		}
		
	}
	
}

function processChoice(selected) {
	selectorTable = document.getElementById("selector");
	selectorTable.style.display = "none";
	addMergeData(
		singularRecords[selected], 
		singularRecords[selected].type+metaData["PRINTANY__QUERY__c"][currentQuery].get("PRINTANY__Sequence__c"), 
		null);
	execNextQuery();
}

function applyTemplate() {

	// first apply any pre-merge javascript that exists
	var preMerge = metaData["PRINTANY__PACKAGE__c"][0].get("PRINTANY__Pre_Merge_Javascript__c");
	if (preMerge != null && preMerge.length > 0) {
		eval(preMerge);
	}

	var templates = metaData["PRINTANY__TEMPLATE__c"];

	if (templateCount == 0) {
		notify("No templates available");
	} else if (templateCount == 1) {
		for (i in templates) {
			mergeTemplate(i);
		}
	} else {
	
		var selectionField = metaData["PRINTANY__PACKAGE__c"][0].get("PRINTANY__Template_Selection_Field__c");
		
		if (nvl(selectionField,"") == "") {
			showTemplateSelector();			
		} else {
			var multipleMatches = false;
			var matchValue = mergeData[selectionField];
			var matchedTemplateId = null;
			for (i in templates) {
				if (templates[i].get("PRINTANY__Selection_Value__c") == matchValue) {
					multipleMatches = (matchedTemplateId != null);
					matchedTemplateId = templates[i].get("Id");
				}
			}
			
			if (matchedTemplateId == null || multipleMatches) {
				showTemplateSelector();			
			} else {
				mergeTemplate(matchedTemplateId);
			}
		}

	}

}

function showTemplateSelector() {

	notify("Please choose a template");

	resetSelectorTable();
	selectorTable = document.getElementById("selector");	
	selectorTableBody = document.createElement("tbody");
	selectorTable.appendChild(selectorTableBody);

	selectorTable.style.display = "block";

	var templates = metaData["PRINTANY__TEMPLATE__c"];

	for (i in templates) {
		newRow = selectorTableBody.insertRow(-1);
		newCell = newRow.insertCell(-1);
		newCell.innerHTML = "<input type='radio' onClick='mergeTemplate(\""+i+"\");'>";
		newCell = newRow.insertCell(-1);
		newCell.className="selector";
		newCell.innerHTML = templates[i].get("Name");
	}

}

function resetSelectorTable() {
	selectorTable = document.getElementById("selector");
	while (selectorTable.hasChildNodes()) { selectorTable.removeChild(selectorTable.firstChild); }
}

function getDefaultDateFormat() {
	var templateRecord = metaData["PRINTANY__TEMPLATE__c"][templateSelected];
	return nvl(templateRecord.get("PRINTANY__Default_Date_Format__c"),"dd/MM/yyyy");
}

function mergeTemplate(selectedId) {

	prtanyDebug("Applying template : "+selectedId,"debug");

	templateSelected = selectedId;

	var templateRecord = metaData["PRINTANY__TEMPLATE__c"][selectedId];

	selectorTable = document.getElementById("selector");
	selectorTable.style.display = "none";

	var divContent = document.getElementById("divContent");
	divContent.style.display = "block";

	addMergeField("Today",new Date());

	var contentString = templateRecord.get("PRINTANY__Content__c");

	var documentId = templateRecord.get("PRINTANY__Content_Document_Id__c");
	if (documentId == null) {
		mergeContent(contentString, templateRecord.get("PRINTANY__Css_Javascript__c"));
	} else {
		notify("Getting template document...");

		var styles = metaData["PRINTANY__TEMPLATE__c"][templateSelected].get("PRINTANY__Css_Javascript__c");
		
		// use manual XHR so that multibyte characters work correctly
		var docConnection;
        try {
            docConnection = new ActiveXObject('Msxml2.XMLHTTP');
        } catch(e) {
            try {
                docConnection = new ActiveXObject('Microsoft.XMLHTTP');
            } catch(e) {
                docConnection = new XMLHttpRequest();
            	// firefox only
				docConnection.overrideMimeType("text/plain; charset=UTF-16");
            }
        }		
		docConnection.open("GET", 
		"/servlet/servlet.FileDownload?file="+documentId, false);
		docConnection.send(null);
		mergeContent(docConnection.responseText, styles);
				
	}
}

function mergeContent(content, css) {

	document.getElementById("divContent").innerHTML = merge(content);

	eval(css);

	isComplete = true;

	if (isComplete) {
		document.getElementById("progressDisplay").style.display = "none";
	}

}

function formatCurrency(num) {
	num = num.toString().replace(/\$|\,/g,'');
	if(isNaN(num))
	num = "0";
	sign = (num == (num = Math.abs(num)));
	num = Math.floor(num*100+0.50000000001);
	cents = num%100;
	num = Math.floor(num/100).toString();
	if(cents<10)
	cents = "0" + cents;
	for (var i = 0; i < Math.floor((num.length-(1+i))/3); i++)
	num = num.substring(0,num.length-(4*i+3))+','+
	num.substring(num.length-(4*i+3));
	return (((sign)?'':'-') + num + '.' + cents);
}

// ===================================================================
// Author: Matt Kruse <matt@mattkruse.com>
// WWW: http://www.mattkruse.com/
// ===================================================================
MONTH_NAMES=new Array('January','February','March','April','May','June','July','August','September','October','November','December','Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec');
DAY_NAMES=new Array('Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sun','Mon','Tue','Wed','Thu','Fri','Sat');
function LZ(x) {return(x<0||x>9?"":"0")+x}
function IsDate2(val,format) {var date=GetDateFromFormat(val,format);if (date==0) { return false; }return true;};
function CompareDates(date1,dateformat1,date2,dateformat2) {var d1=GetDateFromFormat(date1,dateformat1);var d2=GetDateFromFormat(date2,dateformat2);if (d1==0 || d2==0) {return -1;}else if (d1 > d2) {return 1;}return 0;};
function FormatDate(date,format) {
	format=format+"";
	var result="";
	var i_format=0;
	var c="";
	var token="";
	var y=date.getYear()+"";
	var M=date.getMonth()+1;
	var d=date.getDate();
	var E=date.getDay();
	var H=date.getHours();
	var m=date.getMinutes();
	var s=date.getSeconds();
	var yyyy,yy,MMM,MM,dd,hh,h,mm,ss,ampm,HH,H,KK,K,kk,k;
	var value=new Object();
	if (y.length < 4) {
		y = ""+(y-0+1900);
	} 
	value["y"] = ""+y;
	value["yyyy"] = y;
	value["yy"] = y.substring(2,4);
	value["M"] = M;
	value["MM"] = LZ(M);
	value["MMM"] = MONTH_NAMES[M-1];
	value["NNN"] = MONTH_NAMES[M+11];
	value["d"] = d;
	value["dd"] = LZ(d);
	value["E"] = DAY_NAMES[E+7];
	value["EE"] = DAY_NAMES[E];
	value["H"] = H;
	value["HH"] = LZ(H);
	if (H==0){
		value["h"]=12;
	} else if (H>12){
		value["h"] = H-12;
	} else {
		value["h"] = H;
	}
	value["hh"]=LZ(value["h"]);
	if (H>11){
		value["K"]=H-12;
	} else {
		value["K"]=H;
	}
	value["k"]=H+1;
	value["KK"]=LZ(value["K"]);
	value["kk"]=LZ(value["k"]);
	if (H > 11) { 
		value["a"]="PM"; 
	} else { 
		value["a"]="AM"; 
	}
	value["m"] = m;
	value["mm"] = LZ(m);
	value["s"]=s;
	value["ss"]=LZ(s);
	while (i_format < format.length) {
		c=format.charAt(i_format);
		token="";
		while ((format.charAt(i_format)==c) && (i_format < format.length)) {
			token += format.charAt(i_format++);
		}
		if (value[token] != null) { 
			result=result + value[token]; 
		} else { 
			result=result + token; 
		}
	}
	return result;
};

// setStyleByClass: given an element type and a class selector,
// style property and value, apply the style.
// args:
//  t - type of tag to check for (e.g., SPAN)
//  c - class name
//  p - CSS property
//  v - value
var ie = (document.all) ? true : false;

function setStyleByClass(t,c,p,v){
	var elements;
	if(t == '*') {
		// '*' not supported by IE/Win 5.5 and below
		elements = (ie) ? document.all : document.getElementsByTagName('*');
	} else {
		elements = document.getElementsByTagName(t);
	}
	for(var i = 0; i < elements.length; i++){
		var node = elements.item(i);
		for(var j = 0; j < node.attributes.length; j++) {
			if(node.attributes.item(j).nodeName == 'class') {
				if(node.attributes.item(j).nodeValue == c) {
					eval('node.style.' + p + " = '" +v + "'");
				}
			}
		}
	}
}


//-->
		</script>

	<style type="text/css">
		p.debug { font: italic 900 12px arial }
		p.merge { font: italic 900 12px arial ; color: #AA0000}
		td.status { font: small-caps 900 14px arial ; background: #FFFFFF; color: #747E96 }
		td.selector { font: small-caps 900 12px arial ; color: #000000 }
	</style>

	</head>

	<body onload="setup()">

		<table style="display: block" border="0" width="100%" id="progressDisplay">
			<tr><td colspan="3" height="30"/></tr>
			<tr><td/><td width="100%" align="CENTER" nowrap class="status" id="progressMsg"/>Initialising...<td/></tr>
			<tr><td colspan="3" height="15"/></tr>
			<tr><td/><td width="100%" align="CENTER"><img src="/img/waiting_dots.gif"/></td><td/></tr>
		</table>
		
		<table id="selector" style="display: none">
		</table>

		<DIV id="divContent"></DIV>

		<BR>
		<DIV id="divDebugHeader" style="display: none">
			<hr/>
			<b>Debug Mode</b>
			<a href='javascript:loadPackage();'>Reload package</a>
			<a href='javascript:reloadTemplate();'>Reload template</a>
		</DIV>
		<DIV id="divDebug" style="display: none"></DIV>

	</body>

</html>